## It's OK to define global libs and ldflags here as they are defined as private in the libsries pkg-config file
## Restrain yourself to define dependency packages here as they are generated in the public field of pkg-config

## Package configuration
CONFIG = RELEASE

## C global parameters
CFLAGS_BASE = 
CFLAGS_PRIVATE = -isystem ../include 
CFLAGS_CONFIG_RELEASE = -O3 -DNDEBUG
CFLAGS_CONFIG_DEBUG = -g -O0 -DDEBUG=1
CC_LDFLAGS_PRIVATE = -L.
CC_LDFLAGS = 
CC_DEPS =
CC_PKG = 
CC_LIBS =
CC_TEST_PKG = $(CC_PKG) unit
CC_TEST_LIBS = $(CC_LIBS)
CC_TEST_DEPS = $(CC_DEPS)
CC_TEST_LDFLAGS = -L.

## C++ global parameters
CXXFLAGS_BASE = 
CXXFLAGS_PRIVATE = -isystem ../include
CXXFLAGS_CONFIG_RELEASE = -O3 -DNDEBUG
CXXFLAGS_CONFIG_DEBUG = -g -O0 -DDEBUG=1
CXX_LDFLAGS_PRIVATE = -L.
CXX_LDFLAGS = 
CXX_DEPS = 
CXX_PKG = 
CXX_LIBS = -lrt
CXX_TEST_PKG = $(CXX_PKG) unit
CXX_TEST_LIBS = $(CXX_LIBS)
CXX_TEST_DEPS = $(CXX_DEPS)
CXX_TEST_LDFLAGS = -L.

## List of (pkg-config) packages this project depends on
## This affects CFLAGS, CXXFLAGS and LDFLAGS
# CXX_PKG = libfoo++
# CXX_PKG_libfoo++_version = >= 2.34.3

## List of (pg-config) packages this project depends on
## This affects CFLAGS, CXXFLAGS and LDFLAGS for tests
LIBS_TEST = 
PKG_TEST = 

include Makefile.fillmein

## Cross-package flags for individual c/c++ source files
#CFLAGS_foo.c = -DFOO_CROSS=foo_cross
#CXXFLAGS_bar.cpp = -DBAR_CROSS=bar_cross

bincc_package = generate

bincc_generate_src = generate.c
bincxx_generate_src = 
bin_generate_export = $(bincc_generate_src) $(bincxx_generate_src)
bin_generate_deps = 
bin_generate_pkg = pelib-core
bin_generate_libs = 
bin_generate_ldflags = 
bin_generate_cflags = 
bin_generate_cflags_private = 
bin_generate_cxxflags = 
bin_generate_cxxflags_private = 
bin_generate_embed = 

## C++-compiled programs and their sources
bincxx_package = drake-sort parallel-sort

## You shouldn't need to modify the next section
bincc_drake-sort_src = drake-sort.c utils.c $(SORT_CC_FILES)
bincxx_drake-sort_src = $(SORT_CXX_FILES)
bin_drake-sort_export = $(bincc_drake-sort_src) $(bincxx_drake-sort_src)
bin_drake-sort_deps = libmerge.a
bin_drake-sort_pkg = drake drake-intel-ia
bin_drake-sort_libs = -lmerge
bin_drake-sort_ldflags = -L.
bin_drake-sort_cflags =  
bin_drake-sort_cflags_private = 
bin_drake-sort_cxxflags =  
bin_drake-sort_cxxflags_private = -DNB_THREADS=$(shell cat $(DRAKE_PLATFORM) | grep -E "^\s*param\s\s*p\s*:=\s*[0-9][0-9]*\s*;" | cut -f 2 -d = | cut -f 1 -d ';' | xargs echo) 
bin_drake-sort_cxxflags_sort.cpp = -UNB_THREADS -DNB_THREADS=0
bin_drake-sort_embed = 

bincc_parallel-sort_src = parallel-sort.c utils.c $(SORT_CC_FILES)
bincxx_parallel-sort_src = $(SORT_CXX_FILES)
bin_parallel-sort_export = $(bincc_parallel-sort_src) $(bincxx_parallel-sort_src)
bin_parallel-sort_deps = 
bin_parallel-sort_pkg = drake-intel-ia
## Add here library flags you may need. See commented example
## Warning: using -lpthread can result in unpredictable 
## behavior. Use -pthread instead.
bin_parallel-sort_libs = $(PARALLEL_LIBS) # -lxml2
## Add here linker flags, typically library search path
## See example
bin_parallel-sort_ldflags = $(PARALLEL_LDFLAGS) # -L/usr/lib
## Add in either two following variables C flags to use when compiling C files
## You probably don't need it
bin_parallel-sort_cflags = $(PARALLEL_CFLAGS)
bin_parallel-sort_cflags_private = -DNB_THREADS=$(NB_THREADS)
## Add in either two following variables C++ flags to use when compiling C++ files
## such as sort.cpp.
bin_parallel-sort_cxxflags = 
bin_parallel-sort_cxxflags_private = -DNB_THREADS=$(NB_THREADS) 
bin_parallel-sort_embed = 

bincc__src = 
bincxx__src = 
bincc__export = $(bincc__src) $(bincxx__src)
bin__deps = 
bin__pkg = 
bin__libs = 
bin__ldflags =
bin__cflags =
bin__cflags_private = 
bin__cxxflags =
bin__cxxflags_private = 
bin__embed = 

## Example
## List of packages
# bincc_package = foo bar

## Source files for C package foo
# bin_foo_src = foo.c
## cflags for source file foo.c when used to build package foo
# bin_foo_cflags_foo.c = -DFOO_PACKAGE=foo_package
## Package foo is rebuilt upon modifications of files in this list
# bin_foo_deps = $(FOO_DEPS)/foodeps.a
## Dependencies of package foo to other external packages resolvable by pkg-config
# bin_foo_pkg = foolib
## Minimal version of external dependency foolib
# bin_foo_pkg_foolib_version = >= 3.15.2
## Manual arbitrary addictional libs required to build package foo
# bin_foo_libs = -lm -lmanual_lib_foo
## Lindrake options to build package foo
# bin_foo_ldflags = -L$(MANUAL_LIB_FOO_SRC)/src
## cflag options to build objects of package foo
# bin_foo_cflags = -isystem $(INCLUDE_DIR)
## cflag options to build objects of package foo, that does not appear in the generated pkg-config file
# bin_foo_cflags_private = 
## cflag options to build objects of package foo
# bin_foo_cxxflags = -isystem $(INCLUDE_DIR)
## cflag options to build objects of package foo, that does not appear in the generated pkg-config file
# bin_foo_cxxflags_private = 
## Embed these files into the final excutable
# bin_foo_embed = foo-res.xml
## Files to exports when building a source package for foo: foo source files and non-source foo-res.xml to be integrated in the binary package
# bincc_foo_export = $(bincc_foo_src) foo-res.xml

## Source files for C package bar
## The package bar is minimal: one source file, no library
# bincc_bar_src = bar.c
# bincc_bar_export = $(bincc_bar_src)

## Static C library packages and their sources
lib_package =  

libcc__src = 
libcxx__src = 
lib__export = $(libcc__src) $(libcxx_src)
## Flags integrated as libs.private in pkg-config
lib__libs = 
lib__ldflags = 
lib__pkg = 
## Flags integrated as non-private pkg-config flags
## libs
lib__pkg_libs = 
## cflags
lib__pkg_cflags = 
lib__pkg_cxxflags = 
lib__pkg_description = General research utility library used in PELAB
lib__pkg_url = http://www.ida.liu.se/~nicme26
## Rebuild the library upon changes in these files
lib__deps =
## Embed these files into the final archive
lib__embed = 

drake_package = merge 

## Custom schedule
merge_schedule = $(DRAKE_SCHEDULE)
drakecc_merge_graph = $(DRAKE_TASKGRAPH)
drakecxx_merge_graph = 
drakecxx_merge_src = $(SORT_CXX_SRC)
drake_merge_scheduler = lpt
drake_merge_platform = $(DRAKE_PLATFORM)
drake_merge_embed = 
drakecc_merge_src = 
drake_merge_cflags = 
drake_merge_cflags_private = 
drake_merge_cxxflags = 
drake_merge_cxxflags_private = 
drake_merge_export = $(drakecc_merge_src) $(drakecxx_merge_src) sort.h utils.h merge-1.graphml merge-2.graphml merge-3.graphml merge-4.graphml merge-5.graphml merge-6.graphml platform-1.dat platform-2.dat platform-3.dat platform-4.dat platform-5.dat platform-6.dat schedule-1.xml schedule-2.xml schedule-3.xml schedule-4.xml schedule-5.xml schedule-6.xml Makefile.fillmein
drake_merge_libs = 
drake_merge_ldflags = 
drake_merge_pkg = 
drake_merge_pkg_description = 

## C test packages and their sources
testcc_package = 
## C++ test packages and their sources
testcxx_package = 

testcc__src =  
testcxx__src =  
test__export = $(testcc__src) $(testcxx__src)
test__deps = 
test__pkg = 
test__libs = 
test__ldflags = 
testcxx__cflags = 
testcxx__cflags_private = 

## Where to continue compiling
subdirs = 

## Additional settings
clean = *.o *.txt *.fig *.bin *.e *.d *.obj

## Targets to run before any other target runs
## Can be a custom target
## To target by default
FIRST = #first

first:
	@echo $(call projectof_no-obj,merge,drake,cc)
	@/bin/false
